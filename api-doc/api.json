{
  "swagger": "2.0",
  "info": {
    "version": "",
    "title": "Vurg Platform",
    "description": "Peer to peer market place for cryptocurrencies"
  },
  "host": "dev-api.vurg.com",
  "basePath": "/api/",
  "tags": [
    {
      "name": "Authentication"
    },
    {
      "name": "User Verification"
    },
    {
      "name": "User Settings"
    },
    {
      "name": "User Profile"
    },
    {
      "name": "Create Offer"
    },
    {
      "name": "Offer Listing"
    }
  ],
  "paths":{
    "/login": {
      "post": {
        "operationId": "POST-vurg-customer-login",
        "summary": "User Login API",
        "tags": [
          "Authentication"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "dhaval@vurg.com"
                },
                "password": {
                  "type": "string",
                  "example": "12345678"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/refresh": {
      "post": {
        "operationId": "POST-vurg-refresh-token",
        "summary": "User Refresh Token",
        "tags": [
          "Authentication"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/logout": {
      "post": {
        "operationId": "POST-vurg-customer-logout",
        "summary": "User Logout API",
        "tags": [
          "Authentication"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/contactus": {
      "post": {
        "operationId": "POST-contactus",
        "summary": "Contact Us form",
        "tags": [
          "Authentication"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "dhaval@vurg.com"
                },
                "firstname": {
                  "type": "string",
                  "example": "Dhaval"
                },
                "lastname": {
                  "type": "string",
                  "example": "Prajapati"
                },
                "message": {
                  "type": "string",
                  "example": "Hello There, Lorem Ipsum"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/register": {
      "post": {
        "operationId": "POST-vurg-customer-register",
        "summary": "User registration API",
        "tags": [
          "Authentication"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "dhaval p"
                },
                "email": {
                  "type": "string",
                  "example": "dhaval@vurg.com"
                },
                "password": {
                  "type": "string",
                  "example": "12345678"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/email/verify/{id}": {
      "get": {
        "operationId": "POST-vurg-customer-email-verification",
        "summary": "User email verification API",
        "tags": [
          "User Verification"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "verification id",
            "required": true,
            "type": "string",
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/email/resend": {
      "get": {
        "operationId": "POST-vurg-customer-varifcation-email-resend",
        "summary": "Verification email resend",
        "tags": [
          "User Verification"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "type": "string",
            "default": ""
          },
          {
            "name": "id",
            "in": "path",
            "description": "verification id",
            "required": true,
            "type": "string",
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/otp/send": {
      "post": {
        "operationId": "POST-vurg-otp-send",
        "summary": "Send otp on user's mobile API",
        "tags": [
          "User Verification"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "phone": {
                  "type": "string",
                  "example": "+912547856541"
                },
                "phone_code": {
                  "type": "integer",
                  "example": "1",
                  "description": "Main ID of phonecode"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/otp/verify": {
      "post": {
        "operationId": "POST-vurg-otp-verify",
        "summary": "Verify otp on user's mobile number API",
        "tags": [
          "User Verification"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "phone": {
                  "type": "string",
                  "example": "+912547856541"
                },
                "code": {
                  "type": "string",
                  "example": "854785"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/upload/avatar": {
      "post": {
        "operationId": "POST-upload-avatar",
        "summary": "Upload User avatar from user settings",
        "tags": [
          "User Settings"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "profile_pic": {
                  "type": "image/*"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          },
          "501":{
            "description": "Invalid file format"
          }
        }
      }
    },
    "/remove/avatar": {
      "get": {
        "operationId": "POST-remove-user-avatar",
        "summary": "Remove user avatar",
        "tags": [
          "User Settings"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "type": "string",
            "default": ""
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          },
          "501": {
            "description": "User not found"
          }
        }
      }
    },
    "/username/update": {
      "post": {
        "operationId": "POST-change-username",
        "summary": "Change user name",
        "tags": [
          "User Settings"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "loremipsum"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          },
          "501":{
            "description": "You can only change username one time only"
          }
        }
      }
    },
    "/timezones": {
      "get": {
        "operationId": "GET-Timezone",
        "summary": "Get all timezones",
        "tags": [
          "User Settings"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/currencies": {
      "get": {
        "operationId": "GET-currencies",
        "summary": "Get all currencies",
        "tags": [
          "User Settings"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/countries": {
      "get": {
        "operationId": "GET-countries",
        "summary": "Get all countries & country code for phone number",
        "tags": [
          "User Settings"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/settings": {
      "get": {
        "operationId": "GET-settings",
        "summary": "Get all setting list",
        "tags": [
          "User Settings"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/profile/update": {
      "post": {
        "operationId": "POST-update-user-profile",
        "summary": "Update user profile",
        "tags": [
          "User Settings"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "display_name": {
                  "type": "integer",
                  "example": "1",
                  "description": "1:Firstname and initial, 2: Full name, 3: Hide full name"
                },
                "bio": {
                  "type": "text",
                  "example": "I am trader since 2000"
                },
                "preferred_currency": {
                  "type": "interger",
                  "example": "5"
                },
                "user_timezone": {
                  "type": "interger",
                  "example": "2"
                },
                "settings": {
                  "type": "array",
                  "example": "[{setting_id:2,web:1,email:0,other_setting:0}, {setting_id:3,web:0,email:0,other_setting:0}]"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/profile": {
      "get": {
        "operationId": "GET-profile",
        "summary": "Get Logged In User profile",
        "tags": [
          "User Profile"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/change/password": {
      "post": {
        "operationId": "POST-change-password",
        "summary": "Change User Password",
        "tags": [
          "User Profile"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "current_password": {
                  "type": "string",
                  "example": "dhaval@123"
                },
                "new_password": {
                  "type": "string",
                  "example": "dhaval@123456"
                },
                "confirm_password": {
                  "type": "string",
                  "example": "dhaval@123456"
                }                
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          },
          "501": {
            "description": "Invalid current password"
          }
        }
      }
    },
    "/offers": {
      "post": {
        "operationId": "POST-fetch-user-offers",
        "summary": "Fetch user's offers",
        "tags": [
          "User Profile"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "offer_type": {
                  "type": "integer",
                  "example": "1",
                  "description": "1:Buy, 2:Sell"
                },
                "currency_type": {
                  "type": "integer",
                  "example": "0",
                  "description": "0:All, 1:Bicoin, 2:Tether,3: Ethereum"
                },
                "per_page": {
                  "type": "integer",
                  "example": "10"
                },
                "page_number": {
                  "type": "integer",
                  "example": "1"
                },
                "user_id": {
                  "type": "integer",
                  "example": "1",
                  "description": "(Optional) - While display particular user's offers"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/feedback": {
      "post": {
        "operationId": "POST-fetch-user-feedback",
        "summary": "Fetch user's feedback",
        "tags": [
          "User Profile"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "offer_type": {
                  "type": "integer",
                  "example": "1",
                  "description": "0:All, 1:Buyer, 2:Seller"
                },
                "feedback_type": {
                  "type": "integer",
                  "example": "0",
                  "description": "0:All, 1:Positive, 2:Negative"
                },
                "per_page": {
                  "type": "integer",
                  "example": "10"
                },
                "page_number": {
                  "type": "integer",
                  "example": "1"
                },
                "user_id": {
                  "type": "integer",
                  "example": "1",
                  "description": "(Optional) - While display particular user's profile's feedback"
                }                
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/offer/tags": {
      "get": {
        "operationId": "GET-offer-tags",
        "summary": "Get Offer tags while creating offer",
        "tags": [
          "Create Offer"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/offer/paymentMethod": {
      "get": {
        "operationId": "GET-offer-payment-methods",
        "summary": "Get all payment methods while creating offer",
        "tags": [
          "Create Offer"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/offer/change/status": {
      "post": {
        "operationId": "POST-change-offer-status",
        "summary": "Change offer state - Active/Inactive",
        "tags": [
          "User Profile"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "offer_id": {
                  "type": "integer",
                  "example": "1"
                },
                "status": {
                  "type": "integer",
                  "example": "1",
                  "description": "1:Active, 0:Inactive"
                },
                "turn_all": {
                  "type": "integer",
                  "example": "0",
                  "description": "1:all offers will be active, 0: all offers will be inactive"
                }                
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/offer/{id}": {
      "get": {
        "operationId": "GET-offer-details-by-offer-id",
        "summary": "Get Offer details by offer id",
        "tags": [
          "User Profile"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/create/offer": {
      "post": {
        "operationId": "POST-create-offer",
        "summary": "Create Offer",
        "tags": [
          "Create Offer"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "cryptocurreny_type": {
                  "type": "integer",
                  "example": "1",
                  "description": "1:Bitcoin,2:Tether,3: Ethereum"
                },
                "offer_type": {
                  "type": "integer",
                  "example": "1",
                  "description": "1:Buy,2:Sell"
                },
                "payment_method": {
                  "type": "integer",
                  "example": "15",
                  "description": "Payment method id"
                },
                "preferred_currency": {
                  "type": "integer",
                  "example": "15",
                  "description": "Currency id"
                },
                "trade_price_type": {
                  "type": "integer",
                  "example": "1",
                  "description": "1:Market Price, 2:Fixed Price"
                },
                "offer_margin_percentage": {
                  "type": "integer",
                  "example": "5",
                  "description": "(Optional) - Offer Margin Percentage"
                },
                "offer_margin_fixed_price": {
                  "type": "integer",
                  "example": "15",
                  "description": "(Optional) - Offer Margin Fixed Price"
                },
                "minimum_offer_trade_limits": {
                  "type": "integer",
                  "example": "1",
                  "description": "(Optional) - minimum offer trade limits"
                },
                "maximum_offer_trade_limits": {
                  "type": "integer",
                  "example": "15",
                  "description": "(Optional) - maximum offer trade limits"
                },
                "offer_time_limit": {
                  "type": "integer",
                  "example": "30",
                  "description": "Default will be 30 minutes"
                },
                "offer_label": {
                  "type": "string",
                  "example": "Lorem Ipsum",
                  "description": "(Optional) - Offer Label"
                },
                "offer_terms": {
                  "type": "string",
                  "example": "Lorem Ipsum",
                  "description": "Offer Terms"
                },
                "trade_instruction": {
                  "type": "string",
                  "example": "Lorem Ipsum",
                  "description": "Trade Instruction"
                },
                "require_verified_id": {
                  "type": "integer",
                  "example": "0",
                  "description": "Require verified uder id. 0:No, 1:Yes"
                },
                "offer_tags": {
                  "type": "array",
                  "example": "array(1,5,7)",
                  "description": "(Optional) - Offer Tags"
                },
                "target_country": {
                  "type": "integer",
                  "example": "15",
                  "description": "(Optional) - Targeted Country ID"
                },
                "display_full_name": {
                  "type": "integer",
                  "example": "0",
                  "description": "(Optional) - 0:No, 1:Yes"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/update/offer": {
      "post": {
        "operationId": "POST-update-offer",
        "summary": "Update Offer",
        "tags": [
          "Create Offer"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "offer_id": {
                  "type": "integer",
                  "example": "5"                  
                },
                "cryptocurreny_type": {
                  "type": "integer",
                  "example": "1",
                  "description": "1:Bitcoin,2:Tether,3: Ethereum"
                },
                "offer_type": {
                  "type": "integer",
                  "example": "1",
                  "description": "1:Buy,2:Sell"
                },
                "payment_method": {
                  "type": "integer",
                  "example": "15",
                  "description": "Payment method id"
                },
                "preferred_currency": {
                  "type": "integer",
                  "example": "15",
                  "description": "Currency id"
                },
                "trade_price_type": {
                  "type": "integer",
                  "example": "1",
                  "description": "1:Market Price, 2:Fixed Price"
                },
                "offer_margin_percentage": {
                  "type": "integer",
                  "example": "5",
                  "description": "(Optional) - Offer Margin Percentage"
                },
                "offer_margin_fixed_price": {
                  "type": "integer",
                  "example": "15",
                  "description": "(Optional) - Offer Margin Fixed Price"
                },
                "minimum_offer_trade_limits": {
                  "type": "integer",
                  "example": "1",
                  "description": "(Optional) - minimum offer trade limits"
                },
                "maximum_offer_trade_limits": {
                  "type": "integer",
                  "example": "15",
                  "description": "(Optional) - maximum offer trade limits"
                },
                "offer_time_limit": {
                  "type": "integer",
                  "example": "30",
                  "description": "Default will be 30 minutes"
                },
                "offer_label": {
                  "type": "string",
                  "example": "Lorem Ipsum",
                  "description": "(Optional) - Offer Label"
                },
                "offer_terms": {
                  "type": "string",
                  "example": "Lorem Ipsum",
                  "description": "Offer Terms"
                },
                "trade_instruction": {
                  "type": "string",
                  "example": "Lorem Ipsum",
                  "description": "Trade Instruction"
                },
                "require_verified_id": {
                  "type": "integer",
                  "example": "0",
                  "description": "Require verified uder id. 0:No, 1:Yes"
                },
                "offer_tags": {
                  "type": "array",
                  "example": "array(1,5,7)",
                  "description": "(Optional) - Offer Tags"
                },
                "target_country": {
                  "type": "integer",
                  "example": "15",
                  "description": "(Optional) - Targeted Country ID"
                },
                "display_full_name": {
                  "type": "integer",
                  "example": "0",
                  "description": "(Optional) - 0:No, 1:Yes"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/offer/feedback/{id}": {
      "post": {
        "operationId": "GET-offer-feedback-by-offer-id",
        "summary": "Get Offer feedback by offer id",
        "tags": [
          "Create Offer"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "feedback_type": {
                  "type": "integer",
                  "example": "0",
                  "description": "0:All, 1:Positive, 2:Negative"
                }                
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/transactions/{coinId}": {
      "get": {
        "operationId": "GET-transactions by coin id",
        "summary": "Get wallet transactions by coin id",
        "tags": [
          "Wallet Transactions"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/address/{coinId}": {
      "get": {
        "operationId": "GET-address-by-coin-id",
        "summary": "Get address for specific coin",
        "tags": [
          "Wallet"
        ],
        "parameters": [
          {
            "name": "coinId",
            "in": "path",
            "description": "coin id",
            "required": true,
            "type": "string"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/wallets": {
      "get": {
        "operationId": "GET-user-wallets",
        "summary": "Get user wallets",
        "tags": [
          "Wallet"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/coins": {
      "get": {
        "operationId": "GET-coins",
        "summary": "Get list of vurg supported coins",
        "tags": [
          "Wallet"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/profile/{id}": {
      "get": {
        "operationId": "GET-profile",
        "summary": "Get User's profile",
        "tags": [
          "User Profile"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/all/offers": {
      "post": {
        "operationId": "POST-get-all-buy-sell-offer",
        "summary": "Get All offers for Buy or Sell",
        "tags": [
          "Offer Listing"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "cryptocurreny_type": {
                  "type": "integer",
                  "example": "1",
                  "description": "1:Bitcoin,2:Tether,3: Ethereum"
                },
                "offer_type": {
                  "type": "integer",
                  "example": "1",
                  "description": "1:Buy,2:Sell"
                },
                "payment_method": {
                  "type": "integer",
                  "example": "15",
                  "description": "Payment method id"
                },
                "spend_amount": {
                  "type": "integer",
                  "example": "100",
                  "description": "Amount"
                },
                "preffered_currency": {
                  "type": "integer",
                  "example": "15",
                  "description": "Currency id"
                },
                "offer_tags": {
                  "type": "array",
                  "example": "array(1,5,7)",
                  "description": "Offer Tags"
                },
                "target_country": {
                  "type": "integer",
                  "example": "15",
                  "description": "Targeted Country ID"
                },
                "sort_order": {
                  "type": "integer",
                  "example": "1",
                  "description": "1: Price: Lowest to Highest, 2: Price: Highest to Lowest, 3: Trade Speed: Fastest to Slowest, 4: Trade Speed: Slowest to Fastest"
                },
                "page_number": {
                  "type": "integer",
                  "example": "1"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/offer/add/favourite": {
      "post": {
        "operationId": "GET-offer-add-to-favourite",
        "summary": "Add offer to favourite list",
        "tags": [
          "Offer Listing"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "offer_id": {
                  "type": "integer",
                  "example": "1"
                }                
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/trade": {
      "post": {
        "operationId": "POST-start-trade-api",
        "summary": "POST Start trade API",
        "tags": [
          "Trade"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "offer_id": {
                  "type": "integer",
                  "example": "1"
                },
                "amount": {
                  "type": "integer",
                  "example": "1"
                }                  
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/trade/{tradeId}/cancel": {
      "get": {
        "operationId": "GET-cancel-trade-api",
        "summary": "Cancel trade API",
        "tags": [
          "Trade"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/trade/{tradeId}/accept": {
      "get": {
        "operationId": "GET-accept-trade-api",
        "summary": "When seller confirm the payment received ( when seller click on received button )",
        "tags": [
          "Trade"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/trade/{tradeId}/receive": {
      "get": {
        "operationId": "GET-receive-trade-api",
        "summary": "When buyer confirm the payment sent ( when buyer click on paid button )",
        "tags": [
          "Trade"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/offer/remove/favourite": {
      "post": {
        "operationId": "GET-offer-remove-from-favourite",
        "summary": "Remove offer from favourite list",
        "tags": [
          "Offer Listing"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "offer_id": {
                  "type": "integer",
                  "example": "1"
                }                
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/convert-currency": {
      "post": {
        "operationId": "POST-Currency-convert",
        "summary": "COnvert any currency like USD to BTC or BTC to USD",
        "tags": [
          "Wallet Transactions"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "integer",
                  "example": "1"
                },
                "from": {
                  "type": "string",
                  "example": "BTC"
                },
                "to": {
                  "type": "string",
                  "example": "USD"
                }                
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/pre-transaction-details": {
      "post": {
        "operationId": "POST-get-pre-trasaction-details",
        "summary": "Get transactions details before sending it to address",
        "tags": [
          "Wallet Transactions"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "integer",
                  "example": "1"
                },
                "address": {
                  "type": "string",
                  "example": "3ELcfEYHWijLR8U331uX3AD53frHGPjSo2"
                }                
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/send-coin": {
      "post": {
        "operationId": "POST-send-coin-to-wallet-address",
        "summary": "Send coins to other wallet address",
        "tags": [
          "Wallet Transactions"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "integer",
                  "example": "1"
                },
                "feeAmount": {
                  "type": "integer",
                  "example": "1"
                },
                "address": {
                  "type": "string",
                  "example": "3ELcfEYHWijLR8U331uX3AD53frHGPjSo2"
                },
                "password": {
                  "type": "string",
                  "example": "testPassword"
                }                
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    }
  },
  "definitions": {
    
  }
}
